@use 'theme/palettes';
@use 'theme/colors' with (
    $palette: (
        primary: (
            h: 224,
            s: 47
        ),
        secondary: (
            h: 206,
            s: 77
        ),
        accent: (
            h: 26,
            s: 96
        ),
        neutral: (
            h: 230,
            s: 15
        )
    ),
    $tones: (
        0 : 98,
        100 : 95,
        200 : 90,
        300: 85,
        400: 80,
        500: 65,
        600: 40,
        700: 35,
        750: 33,
        800: 30,
        900: 25,
        1000: 10
    )
);

@use 'functions' as f;

// THEME
@forward 'theme/colors';
@forward 'theme/fonts';

// GENERATE
@forward 'theme/palettes';

$palettes: ();
$states: ();
$cats: ();

@each $key, $value in colors.$palette{
    $map: ();
    $map: map-merge($map, ($key: f.create_color_map($value)));
    $palettes: map-merge($palettes, $map);
}

@each $key, $value in colors.$states{
    $map: ();
    $map: map-merge($map, ($key: f.create_color_map($value)));
    $states: map-merge($states, $map);
}

@each $key, $value in colors.$categories{
    $map: ();
    $map: map-merge($map, ($key: f.create_color_map($value)));
    $cats: map-merge($cats, $map);
}

@function color($color: 'neutral', $tone: '500') {
    @return map-get(map-get($palettes, $color), $tone);
}

@function colorcat($cat: 'neutral', $tone: '500') {
    @return map-get(map-get($cats, $cat), $tone);
}


@function colorstates($state: 'neutral', $tone: '500') {
    @return map-get(map-get($states, $state), $tone);
}